This one is from the internet

print a singly linked list with O(1) RAM from end to start. You cannot
change the list. Bring down time complexity to a minimum.

first solution
==============
N^1.5 algorithm:

part=pow(n,1/2)
number_parts=n/part // roughly pow(n,1/2)

for(i=number_parts-1;i>=0;i--) {
	list_elem=run_in_list_until(list,i*part)
	print_list_from_elem(list_elem,part)
}

run_in_list_until(list,x) -> runs from root to element (O(x))
print_list_from_elem(elem,x) -> print element x-1, x-2,...,0 (O(x^2))

Complexity:
	pow(N,1/2)*(N+pow(N,1/2)^2) =
	pow(N,1/2)*(N+N) =
	pow(N,1/2)*N =
	pow(N,1.5)


second solution
===============
N^(4/3) algorithm:
         
part=pow(n,2/3)
number_parts=n/part // roughly pow(n,1/3)
     
for(i=number_parts-1;i>=0;i--) {
	list_elem=run_in_list_until(list,i*part)
	print_1(list_elem,part)
}
 
function print_1(list,n) { // O(X^(3/2))
	part=pow(n,1/2)
	number_parts=n/part // roughly pow(n,1/2)
     
	for(i=number_parts-1;i>=0;i--) {
		list_elem=run_in_list_until(list,i*part)
		print_list_from_elem(list_elem,part)
	}
}
         
run_in_list_until(list,x) -> runs from root to element (O(x))
print_list_from_elem(elem,x) -> print element x-1, x-2,...,0 (O(x^2))
         
Complexity:
	pow(N,1/3)*(N+pow(N,2/3)^(3/2)) =
	pow(N,1/3)*(N+N) =
	pow(N,1/3)*N =
	pow(N,4/3)

third solution
==============
Doing the same trick even more. This way we could bring down the complexity to pow(N,1+e)
for every e>0.
